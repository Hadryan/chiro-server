openapi: "3.0.0"
info:
  title: Grocery Delivery Service - GDS
  description: The API server for Grocery Delivery Service.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: hamed.ma7@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: http://localhost:8000
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        phone:
          type: string
        name:
          type: string
    Slide:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        alt:
          type: string
        target_url:
          type: string
        image_url:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        image_path:
          type: string
        type:
          type: string
        parent_id:
          type: integer
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        properties:
          type: object
          properties:
            size:
              type: string
            color:
              type: string
        parent_id:
          type: integer
        price:
          type: integer
        discount:
          type: integer
    Address:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        customer_id:
          type: integer
        city_id:
          type: integer
        lat:
          type: number
        lng:
          type: number
        address:
          type: string

paths:
  /api/v1/auth/request:
    post:
      description: Submit a phone number to receive a verification code
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone:
                  type: string
              required:
                - phone
      responses:
        200:
          description: the phone number was accepted and a verification code was sent to it via sms
        400:
          description: the input phone number is invalid or nonexistent
  /api/v1/auth/verify:
    post:
      description: Submit the phone number and the verification code to receive a JWT token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone:
                  type: string
                code:
                  type: string
              required:
                - phone
                - code
      responses:
        200:
          description: the phone number and the code was accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: the input phone number is invalid or nonexistent
        401:
          description: the code is wrong
  /api/v1/slides:
    get:
      description: Get a list of all available Slides
      responses:
        200:
          description: list of all slides
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Slide"
  /api/v1/categories:
    get:
      description: list of all available categories
      responses:
        200:
          description: list of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
  /api/v1/categories/{id}/products:
    get:
      description: list of all available products for a category
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The category to retreive products for
      responses:
        200:
          description: list of all available products for a category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /api/v1/products:
    get:
      description: list of all available products
      responses:
        200:
          description: list of all available products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /api/v1/products/{id}:
    get:
      description: details of a single product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to get
      responses:
        200:
          description: details of a single product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        404:
          description: Product not found
  /api/v1/products/search:
    get:
      description: search among all products
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: The string to search for in product title and description
      responses:
        200:
          description: result of the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /api/v1/addresses:
    post:
      description: Inserts a new address for the current user, Requires JWT token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                city_id:
                  type: integer
                lat:
                  type: number
                lng:
                  type: number
                address:
                  type: string
              required:
                - name
                - city_id
                - address
                - lat
                - lng
      responses:
        201:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        422:
          description: Invalid parameters supplied
